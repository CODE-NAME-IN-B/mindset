-- إنشاء سجلات الملفات التقنية
DO $$
DECLARE
  admin_user_id UUID;
BEGIN
  -- الحصول على معرف مستخدم المسؤول (يرجى استبداله بمعرف المستخدم الخاص بك)
  SELECT id INTO admin_user_id FROM auth.users LIMIT 1;
  
  IF admin_user_id IS NULL THEN
    RAISE EXCEPTION 'No users found in the database';
  END IF;
  
  -- إنشاء جدول نماذج النظام إذا لم يكن موجودًا
  CREATE TABLE IF NOT EXISTS public.system_templates (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    template_key TEXT UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
  );

  -- تمكين أمان على مستوى الصف
  ALTER TABLE public.system_templates ENABLE ROW LEVEL SECURITY;
  
  -- إنشاء سياسة للمسؤولين للتعديل على القوالب
  CREATE POLICY "Administrators can manage system templates" 
    ON public.system_templates
    USING (auth.uid() IN (SELECT id FROM auth.users WHERE is_super_admin = true))
    WITH CHECK (auth.uid() IN (SELECT id FROM auth.users WHERE is_super_admin = true));
  
  -- إنشاء سياسة للجميع لقراءة القوالب
  CREATE POLICY "All users can read system templates" 
    ON public.system_templates
    FOR SELECT 
    USING (true);
  
  -- إدخال المواصفات التقنية
  INSERT INTO public.system_templates (title, content, template_key)
  VALUES (
    'المواصفات التقنية',
    '# المواصفات التقنية لتطبيق مايندست (Mindset)

## نظرة عامة
تطبيق مايندست هو تطبيق ويب للملاحظات وتنظيم الأفكار، يسمح للمستخدمين بإنشاء وتحرير وتنظيم الملاحظات مع مجموعة غنية من الميزات مثل دعم Markdown، التنظيم في مجلدات، العلامات، والروابط بين الملاحظات.

## المتطلبات الفنية

### الواجهة الأمامية (Frontend)
- **إطار العمل**: React 18+
- **لغة البرمجة**: TypeScript 5.0+
- **إدارة الحالة**: React Context API
- **التنسيق**: TailwindCSS 3.3+
- **واجهة المستخدم**: مكونات مخصصة مع تصميم متجاوب
- **محرر النصوص**: دعم Markdown باستخدام @uiw/react-md-editor
- **مكتبات إضافية**:
  - react-hot-toast لإشعارات النظام
  - lucide-react للرموز والأيقونات
  - rehype-sanitize لتطهير HTML

### الواجهة الخلفية (Backend)
- **خدمات البيانات**: Supabase
  - قاعدة بيانات PostgreSQL
  - مصادقة وتفويض باستخدام السياسات
  - تخزين الملفات للصور والمرفقات
  - APIs REST تلقائية
- **القواعد**: Row Level Security (RLS)

### بنية البيانات
- **الجداول الرئيسية**:
  - `profiles`: معلومات المستخدم
  - `notes`: الملاحظات
  - `folders`: مجلدات لتنظيم الملاحظات
  - `attachments`: مرفقات الملاحظات
- **العلاقات**:
  - كل مستخدم لديه ملف شخصي واحد
  - كل مستخدم يمكن أن يملك العديد من الملاحظات والمجلدات
  - كل ملاحظة يمكن أن تنتمي إلى مجلد واحد
  - كل ملاحظة يمكن أن تحتوي على عدة مرفقات

## المميزات التقنية

### محرر متقدم مع دعم Markdown
- دعم كامل لتنسيق Markdown
- معاينة مباشرة للمحتوى المنسق
- إدراج الصور وتحميلها
- قوائم المهام
- روابط تشعبية

### نظام العلامات والتصنيف
- دعم للعلامات (tags) غير المحدودة
- تنظيم الملاحظات في مجلدات
- تصفية الملاحظات حسب العلامات أو المجلدات

### الروابط الداخلية
- روابط بين الملاحظات باستخدام صيغة `[[اسم_الملاحظة]]`
- اكتشاف تلقائي للروابط
- تتبع العلاقات بين الملاحظات

### دعم تعدد اللغات
- دعم كامل للغة العربية والإنجليزية
- واجهة مستخدم تدعم RTL وLTR
- ترجمة لجميع نصوص الواجهة والرسائل

### الأمان والمصادقة
- تسجيل الدخول بالبريد الإلكتروني وكلمة المرور
- تسجيل المستخدمين الجدد
- أمان على مستوى الصف (RLS) لحماية البيانات

### مزامنة البيانات
- تخزين تلقائي لجميع التغييرات
- تحديثات متزامنة عبر الأجهزة المتعددة
- إشعارات في الوقت الفعلي للتغييرات

## متطلبات النظام
- متصفح ويب حديث (Chrome، Firefox، Safari، Edge)
- اتصال إنترنت للمزامنة والتخزين
- تخزين محلي (كوكيز) لإدارة الجلسة

## قابلية التوسع
تم تصميم النظام ليكون قابلاً للتوسع مع خطط مستقبلية تشمل:
- دعم للمرفقات متعددة الوسائط
- أدوات للتعاون في الوقت الفعلي
- تكامل مع تطبيقات خارجية
- واجهة برمجة تطبيقات (API) مفتوحة للتكامل',
    'technical_specs'
  ) ON CONFLICT (template_key) DO UPDATE 
    SET content = EXCLUDED.content, 
        title = EXCLUDED.title,
        updated_at = NOW();
  
  -- إدخال مخطط البنية
  INSERT INTO public.system_templates (title, content, template_key)
  VALUES (
    'مخطط البنية',
    '# مخطط البنية لتطبيق مايندست (Mindset)

## نظرة عامة على البنية

تطبيق مايندست مبني باستخدام هيكلية تطبيق الصفحة الواحدة (SPA) ويعتمد على React للواجهة الأمامية وSupabase للواجهة الخلفية. يتبع نمط تصميم قائم على المكونات مع فصل واضح للمسؤوليات.

```
┌───────────────────────────────────────────────────┐
│                   المتصفح                          │
│                                                   │
│  ┌───────────────────────────────────────────┐    │
│  │               React App                   │    │
│  │                                           │    │
│  │  ┌──────────┐  ┌──────────┐  ┌─────────┐  │    │
│  │  │  مكونات   │  │  سياقات  │  │  خدمات  │  │    │
│  │  └──────────┘  └──────────┘  └─────────┘  │    │
│  │                                           │    │
│  └───────────────┬───────────────────────────┘    │
│                  │                                │
└──────────────────┼────────────────────────────────┘
                   │
                   ▼
┌───────────────────────────────────────────────────┐
│                 Supabase                          │
│                                                   │
│  ┌──────────┐  ┌──────────┐  ┌─────────────────┐  │
│  │ مصادقة    │  │ قاعدة    │  │ تخزين الملفات   │  │
│  │          │  │ بيانات   │  │                 │  │
│  └──────────┘  └──────────┘  └─────────────────┘  │
│                                                   │
└───────────────────────────────────────────────────┘
```

## طبقات التطبيق

### 1. طبقة العرض (UI Layer)
تتكون من مكونات React المسؤولة عن عرض واجهة المستخدم وتفاعلاته:

- **مكونات الصفحات**: Layout, Auth, NotesList, NoteEditor
- **مكونات المشتركة**: Sidebar, UserProfile, ProfileSettings
- **مكونات مخصصة**: MDEditor, FileUploader, TagSelector

### 2. طبقة إدارة الحالة (State Management Layer)
تستخدم React Context API لإدارة حالة التطبيق:

- **LanguageContext**: إدارة تعدد اللغات والترجمة
- **ThemeContext**: إدارة الوضع المظلم/الفاتح
- **AuthContext**: إدارة حالة تسجيل الدخول والمستخدم الحالي

### 3. طبقة الخدمات (Service Layer)
تتعامل مع API الخارجية وعمليات البيانات:

- **supabase.ts**: تهيئة العميل واتصالات قاعدة البيانات
- **profileService**: إدارة ملفات تعريف المستخدمين
- **notesService**: إدارة الملاحظات والملفات المرفقة

### 4. طبقة البيانات (Data Layer)
تتكون من قاعدة بيانات Supabase وخدماتها:

- **جداول قاعدة البيانات**: profiles, notes, folders, attachments
- **سياسات RLS**: قواعد الأمان وإدارة الوصول
- **وظائف قاعدة البيانات**: تحديث الطوابع الزمنية، التحقق من الوصول

## تدفق البيانات

```
┌───────────┐    ┌───────────┐    ┌───────────┐    ┌───────────┐
│           │    │           │    │           │    │           │
│ UI مكونات │ -> │  سياقات   │ -> │   خدمات   │ -> │  Supabase │
│           │    │           │    │           │    │           │
└───────────┘    └───────────┘    └───────────┘    └───────────┘
      ^                                                  │
      │                                                  │
      └──────────────────────────────────────────────────┘
```

1. **تفاعل المستخدم**: يتفاعل المستخدم مع مكونات UI
2. **معالجة الحدث**: تقوم مكونات React بمعالجة الحدث وتحديث السياق إذا لزم الأمر
3. **خدمة البيانات**: تستدعي طبقة الخدمات APIs الخاصة بـ Supabase
4. **تخزين/استرجاع البيانات**: تتعامل Supabase مع قاعدة البيانات وتعيد النتائج
5. **تحديث UI**: تتلقى المكونات البيانات المحدثة وتعيد العرض

## تخطيط المكونات

### الصفحة الرئيسية
```
┌─────────────────────────────────────────────────────┐
│ Layout                                              │
│ ┌─────────────┐ ┌───────────────────────────────┐  │
│ │             │ │                               │  │
│ │             │ │                               │  │
│ │   Sidebar   │ │        NotesList /            │  │
│ │             │ │        NoteEditor             │  │
│ │             │ │                               │  │
│ │             │ │                               │  │
│ └─────────────┘ └───────────────────────────────┘  │
└─────────────────────────────────────────────────────┘
```

### واجهة تسجيل الدخول
```
┌─────────────────────────────────────────────────────┐
│                                                     │
│               ┌─────────────────┐                   │
│               │                 │                   │
│               │     Auth        │                   │
│               │                 │                   │
│               └─────────────────┘                   │
│                                                     │
└─────────────────────────────────────────────────────┘
```

## تكامل النظام

### مصادقة المستخدم
- تتم إدارة المصادقة بالكامل عبر Supabase Auth
- يتم تخزين رمز الجلسة في الذاكرة المحلية للمتصفح
- يتم التحقق من حالة المصادقة عند بدء التطبيق وعند التنقل

### تخزين الملفات
- يتم تخزين الصور والمرفقات في Supabase Storage
- تُنظم الملفات في مجلدات استنادًا إلى معرف المستخدم ومعرف الملاحظة
- تُرجع روابط عامة يتم تضمينها في محتوى الملاحظة

### المزامنة
- تحديثات فورية للبيانات عبر Supabase Realtime
- تخزين مؤقت محلي للعناصر المستخدمة بشكل متكرر
- استراتيجية "الاتصال أولاً" مع الاحتفاظ بتجربة مستخدم سلسة أثناء انقطاع الاتصال

## أمان النظام
- أمان على مستوى الصف (RLS) لتقييد الوصول إلى البيانات
- تشفير SSL/TLS للاتصالات
- تطهير مدخلات المستخدم لمنع هجمات XSS
- إدارة الجلسات وإعادة تحميل الرموز لتعزيز الأمان

## الأداء والتحسينات
- الطلب المبكر (Prefetching) للبيانات لتحسين الأداء
- تقسيم الشفرة (Code splitting) لتقليل وقت التحميل الأولي
- تخزين مؤقت للملاحظات والملفات المستخدمة بشكل متكرر
- تأجيل تحميل الصور وأصول الوسائط',
    'architecture_diagram'
  ) ON CONFLICT (template_key) DO UPDATE 
    SET content = EXCLUDED.content, 
        title = EXCLUDED.title,
        updated_at = NOW();
  
  -- إدخال نموذج الأمان
  INSERT INTO public.system_templates (title, content, template_key)
  VALUES (
    'نموذج الأمان',
    '# نموذج الأمان لتطبيق مايندست (Mindset)

## نظرة عامة على الأمان

يتبع تطبيق مايندست نموذج أمان شامل يغطي جوانب متعددة من حماية البيانات والخصوصية، مبني على مبادئ الأمان بالتصميم. يستفيد التطبيق من قدرات الأمان المتقدمة التي توفرها منصة Supabase مع تعزيزات إضافية على مستوى التطبيق.

## مستويات الأمان

```
┌───────────────────────────────────────────────────┐
│               أمان واجهة المستخدم                  │
│  - التحقق من المدخلات                              │
│  - تطهير المحتوى                                   │
│  - حماية XSS                                      │
└─────────────────────┬─────────────────────────────┘
                      │
                      ▼
┌───────────────────────────────────────────────────┐
│             أمان المصادقة والتفويض                 │
│  - مصادقة Supabase                                │
│  - إدارة الجلسات                                   │
│  - سياسات الوصول                                   │
└─────────────────────┬─────────────────────────────┘
                      │
                      ▼
┌───────────────────────────────────────────────────┐
│             أمان قاعدة البيانات                    │
│  - أمان مستوى الصف (RLS)                           │
│  - عزل البيانات                                    │
│  - تشفير البيانات الحساسة                           │
└─────────────────────┬─────────────────────────────┘
                      │
                      ▼
┌───────────────────────────────────────────────────┐
│             أمان البنية التحتية                    │
│  - تشفير TLS/SSL                                  │
│  - جدران الحماية                                   │
│  - قواعد شبكية                                    │
└───────────────────────────────────────────────────┘
```

## المصادقة والتفويض

### نظام المصادقة
- **مصادقة قائمة على البريد الإلكتروني وكلمة المرور**
- **إدارة جلسة JWT**:
  - توقيع وتشفير الرموز
  - مدة صلاحية محدودة (24 ساعة)
  - تجديد تلقائي للجلسات النشطة
- **إدارة كلمات المرور**:
  - تجزئة باستخدام bcrypt مع salt عشوائي
  - التحقق من قوة كلمة المرور
  - حماية ضد محاولات تسجيل الدخول المتكررة

### نظام التفويض
- **أمان مستوى الصف (RLS)** لقيود الوصول إلى البيانات
- **سياسات الجداول** تعتمد على هوية المستخدم المصادق عليه
- **عزل البيانات** بين المستخدمين:
  - المستخدمون يرون فقط الملاحظات والمجلدات والمرفقات الخاصة بهم
  - لا يمكن للمستخدمين الوصول إلى بيانات المستخدمين الآخرين

## سياسات أمان قاعدة البيانات

### سياسات جدول المستخدمين (profiles)
```sql
-- يمكن للمستخدمين عرض ملفاتهم الشخصية فقط
CREATE POLICY "Users can view their own profile" 
  ON public.profiles 
  FOR SELECT 
  USING (auth.uid() = id);

-- يمكن للمستخدمين إنشاء ملفاتهم الشخصية فقط
CREATE POLICY "Users can create their own profile" 
  ON public.profiles 
  FOR INSERT 
  WITH CHECK (auth.uid() = id);

-- يمكن للمستخدمين تحديث ملفاتهم الشخصية فقط
CREATE POLICY "Users can update their own profile" 
  ON public.profiles 
  FOR UPDATE 
  USING (auth.uid() = id);
```

### سياسات جدول الملاحظات (notes)
```sql
-- يمكن للمستخدمين عرض ملاحظاتهم فقط
CREATE POLICY "Users can view their own notes" 
  ON public.notes 
  FOR SELECT 
  USING (auth.uid() = user_id);

-- يمكن للمستخدمين إنشاء ملاحظات لأنفسهم فقط
CREATE POLICY "Users can create their own notes" 
  ON public.notes 
  FOR INSERT 
  WITH CHECK (auth.uid() = user_id);

-- يمكن للمستخدمين تحديث ملاحظاتهم فقط
CREATE POLICY "Users can update their own notes" 
  ON public.notes 
  FOR UPDATE 
  USING (auth.uid() = user_id);

-- يمكن للمستخدمين حذف ملاحظاتهم فقط
CREATE POLICY "Users can delete their own notes" 
  ON public.notes 
  FOR DELETE 
  USING (auth.uid() = user_id);
```

### سياسات جدول المرفقات (attachments)
```sql
-- يمكن للمستخدمين عرض المرفقات المرتبطة بملاحظاتهم فقط
CREATE POLICY "Users can view their own attachments" 
  ON public.attachments 
  FOR SELECT 
  USING (
    auth.uid() IN (
      SELECT user_id FROM notes WHERE id = note_id
    )
  );

-- (سياسات مماثلة للإدراج والتحديث والحذف)
```

## أمان محتوى المستخدم

### تطهير المحتوى
- استخدام `rehype-sanitize` لتطهير محتوى HTML في معاينة Markdown
- إزالة البرمجة النصية والسمات الخطرة
- الحد من العلامات والسمات المسموح بها

### تأمين الملفات المرفقة
- التحقق من نوع الملف وحجمه قبل التحميل
- مسح الملفات بحثًا عن البرامج الضارة
- تخزين الملفات في مخزن Supabase مع تحكم دقيق في الوصول

## حماية نقل البيانات

### تشفير النقل
- تشفير TLS/SSL للاتصالات بين العميل والخادم
- تكوين آمن للبروتوكول (TLS 1.2+)
- التحقق من صحة الشهادة

### أمن API
- استخدام مفاتيح API مع صلاحيات محدودة
- تدقيق طلبات API
- الحد من معدل الطلبات لمنع هجمات DDoS

## إجراءات الحماية من الهجمات الشائعة

### حماية Cross-Site Scripting (XSS)
- تطهير مدخلات المستخدم
- تنفيذ سياسة أمان المحتوى (CSP)
- ترميز الإخراج بشكل مناسب

### حماية Cross-Site Request Forgery (CSRF)
- التحقق من أصل الطلب
- استخدام رموز CSRF لعمليات تغيير الحالة
- فحص الرأس Referer/Origin

### حماية قواعد البيانات
- استخدام الاستعلامات المعدة مسبقًا
- التحقق من صحة المدخلات
- تقييد الوصول إلى قاعدة البيانات عبر RLS

## المراقبة وكشف الحوادث

### التسجيل والمراقبة
- تسجيل محاولات المصادقة
- مراقبة الطلبات غير العادية
- تتبع الوصول إلى البيانات الحساسة

### استجابة الحوادث
- خطة للاستجابة لأي خرق للأمان
- إمكانية إبطال جميع الجلسات النشطة
- عملية الإبلاغ عن الثغرات

## خصوصية البيانات

### حماية البيانات الشخصية
- جمع الحد الأدنى من البيانات اللازمة فقط
- توفير خيارات للمستخدمين للتحكم في بياناتهم
- أوقات انتهاء صلاحية البيانات غير النشطة

### الامتثال للوائح
- دعم متطلبات GDPR للمستخدمين الأوروبيين
- أدوات لتصدير وحذف بيانات المستخدم
- سياسة واضحة للخصوصية

## تحسينات مستقبلية

- المصادقة متعددة العوامل (2FA)
- تشفير البيانات من طرف إلى طرف للملاحظات الحساسة
- وظائف متقدمة للإذن المستندة إلى الأدوار
- توسيع نطاق المراقبة والتدقيق',
    'security_model'
  ) ON CONFLICT (template_key) DO UPDATE 
    SET content = EXCLUDED.content, 
        title = EXCLUDED.title,
        updated_at = NOW();
  
  -- إنشاء الملاحظات من القوالب
  INSERT INTO notes (
    title, 
    content, 
    user_id, 
    created_at, 
    updated_at
  )
  SELECT 
    t.title,
    t.content,
    admin_user_id,
    NOW(),
    NOW()
  FROM system_templates t
  WHERE t.template_key IN ('technical_specs', 'architecture_diagram', 'security_model')
  AND NOT EXISTS (
    SELECT 1 FROM notes n 
    WHERE n.title = t.title AND n.user_id = admin_user_id
  );
  
  RAISE NOTICE 'تم إنشاء الملفات التقنية بنجاح';
END $$; 